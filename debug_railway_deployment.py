#!/usr/bin/env python3
"""
Debug script to test Railway deployment issues
"""
import os
import sys
import asyncio
import logging
from datetime import datetime

def check_environment():
    """Check required environment variables."""
    required_vars = [
        'TELEGRAM_BOT_TOKEN',
        'SUPABASE_URL', 
        'SUPABASE_ANON_KEY',
        'OPENAI_API_KEY',
        'BASE_URL'
    ]
    
    print("=== Environment Variables Check ===")
    missing_vars = []
    
    for var in required_vars:
        value = os.getenv(var)
        if value:
            print(f"‚úÖ {var}: {'*' * 20}...{value[-4:]}")
        else:
            print(f"‚ùå {var}: Missing")
            missing_vars.append(var)
    
    if missing_vars:
        print(f"\n‚ö†Ô∏è Missing variables: {', '.join(missing_vars)}")
        return False
    
    print("\n‚úÖ All environment variables are set")
    return True

async def test_database_connection():
    """Test database connection."""
    print("\n=== Database Connection Test ===")
    try:
        from database import Database
        db = Database()
        await db.initialize()
        print("‚úÖ Database connection successful")
        await db.close()
        return True
    except Exception as e:
        print(f"‚ùå Database connection failed: {e}")
        return False

async def test_bot_initialization():
    """Test bot initialization."""
    print("\n=== Bot Initialization Test ===")
    try:
        from bot import SkinHealthBot
        bot = SkinHealthBot()
        await bot.initialize()
        print("‚úÖ Bot initialization successful")
        await bot.shutdown()
        return True
    except Exception as e:
        print(f"‚ùå Bot initialization failed: {e}")
        return False

def test_webhook_response_handling():
    """Test webhook response handling logic."""
    print("\n=== Webhook Response Logic Test ===")
    
    # Test sample callback data that should be generated by reminders
    test_callbacks = [
        "rating_1", "rating_2", "rating_3", "rating_4", "rating_5"
    ]
    
    print("Expected callback patterns from reminders:")
    for callback in test_callbacks:
        print(f"  - {callback}")
    
    # Check if the callback handling code exists
    try:
        with open('bot.py', 'r') as f:
            bot_code = f.read()
            
        if 'rating_' in bot_code and 'log_daily_mood' in bot_code:
            print("‚úÖ Rating callback handlers found in bot code")
            return True
        else:
            print("‚ùå Rating callback handlers missing from bot code")
            return False
    except Exception as e:
        print(f"‚ùå Error checking bot code: {e}")
        return False

async def test_mood_logging():
    """Test mood logging functionality."""
    print("\n=== Mood Logging Test ===")
    try:
        from database import Database
        db = Database()
        await db.initialize()
        
        # Test with a dummy user ID
        test_user_id = 12345
        result = await db.log_daily_mood(test_user_id, 4, "Good")
        
        if result:
            print("‚úÖ Mood logging function works")
        else:
            print("‚ùå Mood logging failed - user not found (expected for test)")
        
        await db.close()
        return True
    except Exception as e:
        print(f"‚ùå Mood logging test failed: {e}")
        return False

def check_server_configuration():
    """Check server configuration."""
    print("\n=== Server Configuration Check ===")
    
    # Check server.py for proper webhook handling
    try:
        with open('server.py', 'r') as f:
            server_code = f.read()
        
        checks = [
            ('webhook endpoint', '/webhook' in server_code),
            ('callback processing', 'process_update' in server_code),
            ('background tasks', 'BackgroundTasks' in server_code),
            ('proper error handling', 'Exception' in server_code)
        ]
        
        all_good = True
        for check_name, check_result in checks:
            if check_result:
                print(f"‚úÖ {check_name}")
            else:
                print(f"‚ùå {check_name}")
                all_good = False
        
        return all_good
    except Exception as e:
        print(f"‚ùå Error checking server configuration: {e}")
        return False

def generate_deployment_diagnostics():
    """Generate deployment diagnostics."""
    print("\n=== Deployment Diagnostics ===")
    
    print(f"Python version: {sys.version}")
    print(f"Current working directory: {os.getcwd()}")
    print(f"Railway environment: {os.getenv('RAILWAY_ENVIRONMENT', 'Not set')}")
    print(f"Port: {os.getenv('PORT', 'Not set')}")
    
    # Check if required files exist
    required_files = [
        'server.py', 'bot.py', 'database.py', 'railway.json', 
        'requirements-railway.txt', 'nixpacks.toml'
    ]
    
    print("\nRequired files check:")
    for file in required_files:
        if os.path.exists(file):
            print(f"‚úÖ {file}")
        else:
            print(f"‚ùå {file}")

async def main():
    """Run all diagnostic tests."""
    print("üîç Railway Deployment Diagnostics")
    print("=" * 50)
    
    tests = [
        ('Environment Variables', check_environment),
        ('Server Configuration', check_server_configuration),
        ('Webhook Response Logic', test_webhook_response_handling),
        ('Database Connection', test_database_connection),
        ('Bot Initialization', test_bot_initialization),
        ('Mood Logging', test_mood_logging)
    ]
    
    results = {}
    
    for test_name, test_func in tests:
        try:
            if asyncio.iscoroutinefunction(test_func):
                result = await test_func()
            else:
                result = test_func()
            results[test_name] = result
        except Exception as e:
            print(f"‚ùå {test_name} failed with exception: {e}")
            results[test_name] = False
    
    generate_deployment_diagnostics()
    
    print("\n" + "=" * 50)
    print("üìä Test Results Summary:")
    
    passed = sum(results.values())
    total = len(results)
    
    for test_name, result in results.items():
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"  {status} {test_name}")
    
    print(f"\nüéØ Overall: {passed}/{total} tests passed")
    
    if passed < total:
        print("\nüîß Recommended Actions:")
        
        if not results.get('Environment Variables'):
            print("  1. Set missing environment variables in Railway dashboard")
        
        if not results.get('Database Connection'):
            print("  2. Check Supabase credentials and network connectivity")
        
        if not results.get('Bot Initialization'):
            print("  3. Verify Telegram bot token is valid")
        
        if not results.get('Webhook Response Logic'):
            print("  4. Check bot.py callback handler implementation")
        
        print("  5. Check Railway deployment logs for specific errors")
        print("  6. Ensure webhook URL is properly set on Telegram")

if __name__ == "__main__":
    # Load environment variables
    from dotenv import load_dotenv
    load_dotenv()
    
    asyncio.run(main())
